{"version":3,"sources":["components/Search.js","components/Scroll.js","components/Card.js","components/CardList.js","components/ErrorBoundry.js","components/App.js","serviceWorker.js","index.js"],"names":["Search","onNameChange","state","className","type","value","name","onChange","placeholder","Scroll","props","style","overflow","border","height","paddingTop","children","Card","backgroundColor","src","alt","email","CardList","robots","map","robot","key","id","ErrorBoundry","hasError","error","input","this","setState","React","Component","App","event","target","fetch","URL","then","response","json","data","filter","toLowerCase","includes","length","filterRobots","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"sNAkBeA,EAhBA,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,aAAcC,EAAY,EAAZA,MAC9B,OACE,yBAAKC,UAAU,aACb,wBAAIA,UAAU,eAAd,gBACA,yBAAKA,UAAU,yBACb,2BACEC,KAAK,OACLC,MAAOH,EAAMI,KACbC,SAAUN,EACVO,YAAY,iBCMPC,EAfA,SAAAC,GACb,OACE,yBACEC,MAAO,CACLC,SAAU,SACVC,OAAQ,kBACRC,OAAQ,QACRC,WAAY,SAGbL,EAAMM,WCIEC,EAdF,SAAAP,GACX,OACE,yBAAKP,UAAU,QACb,yBAAKA,UAAU,QAAQQ,MAAO,CAAEO,gBAAiB,YAC/C,yBAAKC,IAAG,+BAA0BT,EAAMJ,MAAQc,IAAI,WAEtD,yBAAKjB,UAAU,WACb,yBAAKA,UAAU,UAAUO,EAAMJ,MAC/B,yBAAKH,UAAU,eAAeO,EAAMW,UCK7BC,EANE,SAAAZ,GACf,OACE,yBAAKP,UAAU,2BAAsCO,EAAMa,OAP/CC,KAAI,SAAAC,GAChB,OAAO,kBAAC,EAAD,CAAMnB,KAAMmB,EAAMnB,KAAMe,MAAOI,EAAMJ,MAAOK,IAAKD,EAAME,UCYnDC,E,2MAdb1B,MAAQ,CAAE2B,UAAU,G,iFAEFC,EAAOC,GACvBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAI1B,OAAIG,KAAK9B,MAAM2B,SACN,uDAEFG,KAAKtB,MAAMM,a,GAXKkB,IAAMC,WC2ClBC,E,2MApCblC,MAAQ,CAAEI,KAAM,GAAIiB,OAAQ,I,EAQ5BtB,aAAe,SAAAoC,GACb,EAAKJ,SAAS,CAAE3B,KAAM+B,EAAMC,OAAOjC,S,mFAPhB,IAAD,OAClBkC,MAAMC,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAI,EAAKX,SAAS,CAAEV,OAAQqB,S,mCAO7BtC,GACX,OAAO0B,KAAK9B,MAAMqB,OAAOsB,QAAO,SAAApB,GAAK,OACnCA,EAAMnB,KAAKwC,cAAcC,SAASzC,EAAKwC,oB,+BAKzC,GAAiC,IAA7Bd,KAAK9B,MAAMqB,OAAOyB,OACpB,OAAO,2CAET,IAAMzB,EAASS,KAAKiB,aAAajB,KAAK9B,MAAMI,MAC5C,OACE,yBAAKH,UAAU,iBACb,kBAAC,EAAD,CAAQD,MAAO8B,KAAK9B,MAAOD,aAAc+B,KAAK/B,eAC9C,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUsB,OAAQA,W,GA7BZW,IAAMC,WCIJe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdC,OAAM,SAAAlC,GACLmC,QAAQnC,MAAMA,EAAMoC,a","file":"static/js/main.6fc9cadb.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Search = ({ onNameChange, state }) => {\n  return (\n    <div className=\"container\">\n      <h1 className=\"header-text\">ROBOT FRIEND</h1>\n      <div className=\"ui input search-input\">\n        <input\n          type=\"text\"\n          value={state.name}\n          onChange={onNameChange}\n          placeholder=\"Search...\"\n        ></input>\n      </div>\n    </div>\n  );\n};\n\nexport default Search;\n","import React from \"react\";\n\nconst Scroll = props => {\n  return (\n    <div\n      style={{\n        overflow: \"scroll\",\n        border: \"1px solid white\",\n        height: \"100vh\",\n        paddingTop: \"10px\"\n      }}\n    >\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;\n","import React from \"react\";\n\nconst Card = props => {\n  return (\n    <div className=\"card\">\n      <div className=\"image\" style={{ backgroundColor: \"#113b51\" }}>\n        <img src={`https://robohash.org/${props.name}`} alt=\"robot\" />\n      </div>\n      <div className=\"content\">\n        <div className=\"header\">{props.name}</div>\n        <div className=\"description\">{props.email}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\nimport Card from \"./Card\";\n\nconst renderList = robots => {\n  return robots.map(robot => {\n    return <Card name={robot.name} email={robot.email} key={robot.id} />;\n  });\n};\n\nconst CardList = props => {\n  return (\n    <div className=\"ui link cards card-list\">{renderList(props.robots)}</div>\n  );\n};\n\nexport default CardList;\n","import React from \"react\";\n\nclass ErrorBoundry extends React.Component {\n  state = { hasError: false };\n\n  componentDidCatch(error, input) {\n    this.setState({ hasError: true });\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Opps, we have an error!</h1>;\n    }\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundry;\n","import React from \"react\";\nimport Search from \"./Search\";\nimport Scroll from \"./Scroll\";\nimport CardList from \"./CardList\";\nimport ErrorBoundry from \"./ErrorBoundry\";\n\nconst URL = \"https://jsonplaceholder.typicode.com\";\n\nclass App extends React.Component {\n  state = { name: \"\", robots: [] };\n\n  componentDidMount() {\n    fetch(URL + \"/users\")\n      .then(response => response.json())\n      .then(data => this.setState({ robots: data }));\n  }\n\n  onNameChange = event => {\n    this.setState({ name: event.target.value });\n  };\n\n  filterRobots(name) {\n    return this.state.robots.filter(robot =>\n      robot.name.toLowerCase().includes(name.toLowerCase())\n    );\n  }\n\n  render() {\n    if (this.state.robots.length === 0) {\n      return <div>Loading...</div>;\n    }\n    const robots = this.filterRobots(this.state.name);\n    return (\n      <div className=\"app-container\">\n        <Search state={this.state} onNameChange={this.onNameChange} />\n        <Scroll>\n          <ErrorBoundry>\n            <CardList robots={robots} />\n          </ErrorBoundry>\n        </Scroll>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}